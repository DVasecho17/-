//Файл Error.h
#ifndef ERROR_H_INCLUDED
#define ERROR_H_INCLUDED
#include <string>
#include <iostream>

using namespace std;

class error //клас помилка.
{
    string str;
public:
//конструктор, ініціює атрибут str повідомленням про помилку.
    error(string s)
    {
        str=s;
    }
    void what()
    {
        cout<<str<<endl; //виводить значення атрибута str.
    }
};

#endif

//Файл Vector.h
#ifndef VECTOR_H_INCLUDED
#define VECTOR_H_INCLUDED

#include <iostream>
using namespace std;


class Vector
{
    int size;
    int *beg;
public:
    Vector()
    {
        size=0;
        beg=0;
    }
    Vector(int s);
    Vector(int s,int* mas);
    Vector(const Vector&v);
    ~Vector();
    const Vector& operator=(const Vector&v);
    int operator[](int i);
    Vector operator--();
    Vector operator--(int notused);
    int getSize();
    friend ostream& operator<<(ostream&out,const Vector&v);
    friend istream& operator>>(istream& in, Vector&v);
};
#endif // VECTOR_H_INCLUDED

//Файл Vector.cpp
#include "Vector.h"
#include "Error.h"
#include <iostream>
using namespace std;
Vector::Vector(int s)
{
    size=s;
    beg=new int [s];
    for(int i=0; i<size; i++)
        beg[i]=i+5;
}
Vector::Vector(const Vector &v)
{
    size=v.size;
    beg=new int [size];
    for(int i=0; i<size; i++)
        beg[i]=v.beg[i];
}
Vector::~Vector()
{
    if (beg!=0) delete[]beg;
}
Vector::Vector(int s,int *mas)
{
    size=s;
    beg=new int[size];
    for(int i=0; i<size; i++)
        beg[i]=mas[i];
}
const Vector& Vector::operator =(const Vector &v)
{
    if(this==&v)return *this;
    if(beg!=0) delete []beg;
    size=v.size;
    beg=new int [size];
    for(int i=0; i<size; i++)
        beg[i]=v.beg[i];
    return*this;
}
ostream& operator<<(ostream&out, const Vector&v)
{
    if(v.size==0) out<<"Empty\n";
    else
    {
        for (int i=0; i<v.size; i++)
            out<<v.beg[i]<<" ";
        out<<endl;
    }
    return out;
}
istream& operator >>(istream&in, Vector&v)
{
    for(int i=0; i<v.size; i++)
    {
        cout<<">";
        in>>v.beg[i];
    }
    return in;
}
int Vector::operator [](int i)
{
    if(i<0) throw error("index <0");
    if(i>=size) throw error("index>size");
    return beg[i];
}

Vector Vector::operator --()
{
    if(size==0) throw error("Vector is empty");
    if (size==1)
    {
       size=0;
    delete[]beg;
    beg=0;
    return *this;
  };
  Vector temp(size,beg);
  delete[]beg;
  size--;
  beg=new int[size];
  for(int i=0;i<size;i++)
    beg[i]=temp.beg[i];
  return*this;
}
int Vector ::getSize()
{
    if(size==0) throw error("Vector is empty");
    return size;
}
Vector Vector:: operator  --(int notused)
{
        Vector temp2(*this);

if(size==0) throw error("Vector is empty");
    if (size==1)
    {
       size=0;
    delete[]beg;
    beg=0;
    return *this;
  };
  Vector temp(size,beg);
  delete[]beg;
  size--;
  beg=new int[size];
  for(int i=1;i<=size;i++)
    beg[i-1]=temp.beg[i];
  return temp2;
}

//Файл main.cpp
#include "Vector.h"
#include "Error.h"
#include <iostream>
using namespace std;
Vector::Vector(int s)
{
    size=s;
    beg=new int [s];
    for(int i=0; i<size; i++)
        beg[i]=i+5;
}
Vector::Vector(const Vector &v)
{
    size=v.size;
    beg=new int [size];
    for(int i=0; i<size; i++)
        beg[i]=v.beg[i];
}
Vector::~Vector()
{
    if (beg!=0) delete[]beg;
}
Vector::Vector(int s,int *mas)
{
    size=s;
    beg=new int[size];
    for(int i=0; i<size; i++)
        beg[i]=mas[i];
}
const Vector& Vector::operator =(const Vector &v)
{
    if(this==&v)return *this;
    if(beg!=0) delete []beg;
    size=v.size;
    beg=new int [size];
    for(int i=0; i<size; i++)
        beg[i]=v.beg[i];
    return*this;
}
ostream& operator<<(ostream&out, const Vector&v)
{
    if(v.size==0) out<<"Empty\n";
    else
    {
        for (int i=0; i<v.size; i++)
            out<<v.beg[i]<<" ";
        out<<endl;
    }
    return out;
}
istream& operator >>(istream&in, Vector&v)
{
    for(int i=0; i<v.size; i++)
    {
        cout<<">";
        in>>v.beg[i];
    }
    return in;
}
int Vector::operator [](int i)
{
    if(i<0) throw error("index <0");
    if(i>=size) throw error("index>size");
    return beg[i];
}

Vector Vector::operator --()
{
    if(size==0) throw error("Vector is empty");
    if (size==1)
    {
       size=0;
    delete[]beg;
    beg=0;
    return *this;
  };
  Vector temp(size,beg);
  delete[]beg;
  size--;
  beg=new int[size];
  for(int i=0;i<size;i++)
    beg[i]=temp.beg[i];
  return*this;
}
int Vector ::getSize()
{
    if(size==0) throw error("Vector is empty");
    return size;
}
Vector Vector:: operator  --(int notused)
{
        Vector temp2(*this);

if(size==0) throw error("Vector is empty");
    if (size==1)
    {
       size=0;
    delete[]beg;
    beg=0;
    return *this;
  };
  Vector temp(size,beg);
  delete[]beg;
  size--;
  beg=new int[size];
  for(int i=1;i<=size;i++)
    beg[i-1]=temp.beg[i];
  return temp2;
}
